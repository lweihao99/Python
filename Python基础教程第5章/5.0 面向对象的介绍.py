"""
面向对象与面向过程
    1. 面向过程:根据业务逻辑从上到下写代码
    2. 面向对象:将变量与函数绑定到一起，分类进行封装，每个程序只要负责分配给自己的分类，这样能够更快速的开发程序，减少重复代码

面向过程编程最易被初学者接收，其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑组织在一起，
数据与函数分开考虑，面向过程基本是有函数组成的

A) 面向过程

比如:
    print('名片管理系统 v1.0'.center(50, '-'))
    msg = '''
    1: 添加名片
    2: 删除或修改名片
    3: 查询名片
    4: 显示所有名片

    0: 退出系统
    '''
    print(msg)
    print('END'.center(50, '-'))

    enter = int(input('请输入你要进行的操作:'))
    while True:
        if enter == 1:  # 添加名片

            print(add())
            print('用户添加成功')
            print('END'.center(100, '-'))
            main()

        elif enter == 2:  # 修改，删除
            modify()
            main()

    def add():
        pass

    def modify():
        pass
这一段代码就是面向过程，每个操作都有一个对应的代码，函数: enter=1 ==> add() , 2 ==> modify(),结构很清晰

面向过程的关注点在于怎么做
    1. 把完成某一个需求的所有步骤，从头到尾逐步实现
    2. 根据开发需求，把某些功能独立的代码封装成一个又一个函数
    3. 最后完成的代码，就是顺序的调用不同的函数
特点:
    1. 注重步骤与过程，不注重职责分工
    2. 如果需求复杂，代码会变得很复杂
    3. 开发复杂项目，没有固定的套路，开发难度很大!



B) 面向对象基本概念

面向对象编程(Object Oriented Programming, OOP, 面向对象程序设计) 和面向过程编程，是两种不同的编程方式.

面向对象编程的关注点在于谁来做! (相比较函数，面向对象是更大的封装，根据职责在一个对象中封装多个方法)
    1. 在完成某一个需求前，首先缺确定职责---要做的事情(方法)
    2. 根据职责确定不同的对象，在对象内部封装不同的方法(多个)
    3. 最后完成的代码，就是顺序的调用不同对象的相应方法。
特点:
    1. 注重对象和职责，不同的对象承担不同的职责
    2. 更加适合应对复杂的需求变化，是专门应对复杂项目开发，提供的固定套路
    3. 需要在面向过程基础上，在学习一些面向对象的语法

要想使用面向对象的话，要干什么:
以植物大战僵尸为例: (用类图来分类)
    1. 要先分类,比如要是用植物大战僵尸来分类的话，有两大类:
        1.1 植物 
        特性有:
            1.1.1 特征，就是: hp，cost，position 
            1.1.2 行为,统一行为有: shake(摇晃) 
        植物可以再分两个类:*(还可以细分)
            a.ProtectPlant(保护性的植物):
            b.AttackPlant(攻击型植物):
            属性有:
                b.1 damage==> 伤害量
                b.2 attack_cd==> 攻击间隔
        1.2 僵尸
        特性有:(同上)
            1.2.1 特征
            1.2.1 行为

类分好了之后就根据类来创建对象,而以这个类创建的对象会有类的所有属性，比如要是在游戏里有6个豌豆射手那就会创建6个对象



C) 类和对象

类 和 对象 是面向对象编程的两个核心概念

类:
    类是对一群具有相同特征或者行为的事物的一个统称，是抽象的.
        1. 特征其实就是一个变量，在类里我们称之为属性
        2. 行为其实就是一个函数，在类里我们称之为方法
        3. 类其实就是有 属性 和 方法组成的一个抽象概念

类就相当于制造飞机时的图纸，是一个模板。这个模板只规定了飞机的某些 特征(列如大小，颜色，型号等等)和 行为(列如起飞，降落，飞行等等)
它并不是一个具体的飞机，而是对飞机的一个抽象概念。它出现的目的，是为了让我们创建飞机对象

所以在所人类的时候，所有人的都是两手两腿，但是要是具体到某个人就有了他的特征，特性，就是成个人了而不是类

对象:
    对象是有类创建出来的一个具体存在，可以直接使用。由哪一个类创建出来的对象，就拥有那一个类中定义的属性和方法。
    对象 就相当于用图纸制造的飞机。在开发中，应该先有类(图纸)，在类里定义好属性和行为，在根据类来创建对象。



D) 类和对象的关系

    a. 类是模板，对象是根据这个模板创建出来的，应该先有类，再有对象。
    b. 使用同一个类，能够创建出很多对象
    c. 类中定义了什么属性和方法，对象中就有什么属性和方法
    d. 不同对象对应的属性值也会不同

列如: 定义了一个狗类，这个狗类有以下属性:
    - 品种
    - 颜色
    - 性别
    - 名字

现在根据这个类创建出了两条狗，这两条狗分别是[哈士奇，灰色，母，二哈] 和 [中华田园犬，黄色，公，旺财]。
我们发现，这两条狗都具有 品种，颜色，性别和名字这些属性，但是每条狗对应的属性值却不一样。



E) 类的设计

在使用面相对象开发前，首先应该分析需求，确定一下，程序中需要包含哪些类！
在程序开发中，要设计一个类，通常需要满足一下三个要素:
    1. 类名: 这类事物的名字，按照大驼峰命名法(每个单词首字母大写)起名
    2. 属性: 这类事物具有什么样的特征
    3. 方法: 这类事物具有什么样的行为

比如:
    a. 小明今年18岁，身高1.75，每天早上跑完步，会去吃东西
    b. 小美几年17岁，身高1.65，小美不跑步，小美喜欢吃东西

可以这么写:
    看5.1 面向对象的基本语法
"""
