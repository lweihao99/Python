'''
高阶函数:
    1，一个函数作为另一个函数的返回值
    2， 一个函数作为另一个函数的参数-->看3.5
    3， 在函数内部再定义一个函数
'''

# 1.一个函数作为另一个函数的返回值
def foo():
    print('我是foo,我被调用了')
    return 'foo'


def bar():
    print('我是bar，我被调用了')
    return foo()


x = bar() # 这里x是bar()的返回值，也就是foo()的返回值，所以不是一个函数
# 要是bar()返回的是foo 那么x就是一个函数名，可以被调用x()
print("x =",x)


#2.在函数内部再定义一个函数,函数的嵌套看3.1

def outer():
    m = 100

    def inner(): # 这是outer的内部函数，所以不能被外部调用
        n = 90
        print("我是inner函数")

    print('我是outer函数')
    return inner # 返回函数名

# 调用函数
outer()() # 调用嵌套在函数里的函数


# 闭包:
#   闭包是有函数及其相关的引用环境组合而成的实体
#   闭包 = 函数块+引用环境

def out():

    x = 10 # 在外部函数里定义了一个变量x，是一个局部变量

    def inn():
        
        # 在内部函数如何修改外部函数的局部变量-->使用nonlocal
        # 不能在内部函数从新定义一个x，因为这只在内部函数作用，但不会修改外部函数的变量
        # 但是在声明了nonlocal了之后，在内部函数声明的x就不在是新增的变量，而是外部的局部变量
        nonlocal x
        y = x+1
        print("inn里的y是{}".format(y))
        x = 20 # 这里修改了外部函数的局部变量

        pass

    return inn

# 所以如果在一个内部函数里，对在外部作用域(但不是在全局作用域)的变量进行引用，那么内部函数就被认为是闭包(closure)
out()()





