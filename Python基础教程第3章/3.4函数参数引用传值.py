# a = 1 # 1是对象，就是将变量名a绑定到了一个内存地址上面，也就是存储1的内存地址,开辟出的区域
# a = 2 # 这里指向了不同的内存地址,就是存储2的内存地址
a = 1
def func(x):
    print(id(x))
    x = 2 # 内存空间为2这个值从新开辟了一个内存空间，并且生成了一个新的内存地址, 但是函数内部修改不会改变外部的
    print("新的x值是:",id(x)) # 这里由于给x从新赋值了一个内存地址，所以x的内存地址变了，就是指向对象变了

# 调用函数
print("a的地址:",id(a)) # 可以发现a的内存地址和x的内存地址是一致的
func(a) # 这是对同一个内存地址的引用
print(id(a)) # 这里a的值，在x的值得指向对象改变了之后，没有改变， 所以 a = 1 是不可变类型变量

# 可变类型的变量
li = []
def testRenc(parms):
    print("函数列表的地址:",id(parms))
    li.append([1,2,3,4,5,6])
    print("函数内部的对象{}".format(li))


print("li空列表的id：",id(li))
# 调用函数
testRenc(li)
print("修改完之后的li列表",id(li)) #在函数里给li空列表追加了值之后，内存地址没有改变
print("外部的变量对象{}".format(li))

# 1，在python当中，万物皆对象，在函数调用的时候，实参传递的就是对象的引用
# 2，了解了原理之后，就可以更好的去把控在函数内部的处理是否会影响到函数外部数据的变化
# 3，参数传递是通过对象引用来完成，所以传递的不是值而是将值得内存地址引用传递给函数参数
# 所以对不可变类型的变量，函数内部的改变不会影响到函数外部，
# 而可变类型的变量是可以被函数内部的参数所影响到的,函数内部的修改会直接影响到函数外部的数据修改,但是内存地址本身是不会被改变的

