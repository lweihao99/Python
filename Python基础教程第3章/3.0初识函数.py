# 函数概念:
# *函数是在编写代码的过程中,有某一功能代码块出现多次,但是为了提高编写的效率以及代码的重用效率,所以把具有独立功能的代码块,组织为一个小模块(解决不必要的代码冗余)
# 简单来讲函数就是一系列Python语句的组合,可以在程序中运行一次或者多次，一般是具有独立功能的
# 而使用函数的意义在于，代码的复用最大化，以及最小化冗余代码，整体代码结构清晰，还有问题局部化

# *函数定义:
'''
def 函数名(参数列表):
    代码块

函数调用
'''
# 函数的运行逻辑是:先运行函数调用在运行函数代码
# 参数列表可以为空列表，也可以为 n 个参数，根据需求来确定需要几个参数

# 函数调用:
# 函数名+()即可调用该函数

# 函数说明文档:
# 函数内容的第一行可以用字符串进行函数说明


def printInfo():  # 函数定义
    # 函数代码块;一系列Python 语句,表示独立功能
    names = ["Weihao", "Jax", "Marco", "Jimmy"]
    for i in names:  # 将每个元素赋值给 i
        print(i, "下标:", names.index(i))
    pass  # pass是空语句,不做任何事情,一般用做占位语句


# 函数调用，本质上就是去执行函数定义里面的代码块，所以在调用前，必须先定义
printInfo()
print("多次调用".center(50, "-"))
printInfo()  # 代码的复用
print("代码的复用".center(50, "+"))


def printComment():  # 函数定义
    """
    这个函数是用来打印游戏名的
    """
    games = ("dota", "cod", "league of legends", "csgo", "oni")
    for k in games:
        print(k, "下标:", games.index(k))


# 函数调用
# 将鼠标指针放到函数调用上,可以看到函数定义里第一行的函数说明
printComment()
print("下面是带参数修改的函数".center(50, ">"))
# 进一步的需求--->输出不同的信息--->通过传入参数来解决


def infoTest(name, height, weight, hobby, job):  # 通过括号里的参数来从新定义-->这是必须参数
    # 通过调用参数来从新赋值,并修改我的需求
    print("%s的身高是%f" % (name, height))
    print("%s的体重是%f" % (name, weight))
    print("%s的爱好是%s" % (name, hobby))
    print("%s的专业是%s" % (name, job))
    pass  # 空语句


# 调用带参数的信息,并给参数(变量)从新赋值我想要的值
# 这种方式可以根据不同的需求来从新修改参数
infoTest("小李", 1.85, 75, "打游戏", "程序员")
print("以上是带参数的调用".center(50, "<"))


# *函数参数分类:
"""
    1、必选参数---> 必须给它赋值的参数
    2、默认参数[缺省参数]
    3、可选参数--->可变化的参数-->不定长参数，当一个函数要处理比当初声明的参数要多的时候就是不定长参数-->定义函数是不用声明参数，而是加 (*args)
    4、关键字参数--->也是个不定长参数
"""
# 参数就是函数为了实现某项特定功能，从外部得到需要的数据,简单来讲参数就是函数从外部接收需要数据的入口(接口)

# *1、必选参数


def sum(a, b):  # 定义两个变量(参数)--->形式参数:只是意义上的一种参数，在定义的时候是不占用内存地址的(不会开辟内存空间)
    sum = a+b
    print(sum)


# 调用参数，给参数赋值
sum(50, 50)  # ----> 实际参数--->占用内存地址
# sum() #在调用函数的时候，必选参数不能为空，必须给形式参数赋值使其变成实际参数，否则会报错
print("分割线".center(50, "-"))


# *2、默认参数[缺省参数]


def sum1(a=20, b=30):  # 直接给参数一个默认值
    print("默认参数的使用=%d" % (a+b))


# 默认参数的调用
sum1()  # 没有从新给参数赋值的情况下，会直接调用参数默认值
sum1(35, 35)  # 可以从新赋值
# sum1(35) # 如果一个参数是默认值，另一个参数不能是非默认值，必须同样是默认参数,否则会报错
print("分割线".center(50, "-"))


# *3、可选参数--->可变化的参数-->当参数的个数不确定的时候比较灵活
# 定义 (*args)---> args 可以是随便什么名字,相当于一个变量名
def getData(*args):  # 可变长的参数类型
    print("参数调用之后第一行可变参数:", args)
    print("分割线".center(50, "-"))
    for i in args:
        if i == 1:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 2:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 3:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 4:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 5:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 6:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 7:
            print("依次打印元组除第一个元素外的其他元素", i)
        elif i == 8:
            print("依次打印元组除第一个元素外的其他元素", i)
    print("分割线".center(50, "-"))
    k = args[0]
    for a in k:
        print("依次打印元组中的列表的每个元素:", a)
    print("分割线".center(50, "-"))


# args 是元组类型数据
getData([1, 2, 3, 4, 5, 6, 7], 1, 2, 3, 4, 5, 6, "weihao", "jax")
print("分割线".center(50, "-"))


# *4、关键字参数-->也是可变的参数; 参数的长度可以使 0 - n 个,也就是说函数调用可以为空
# 用 (**kwargs) 来定义, kwargs 可以是随便什么内容，相当于一个变量名
# 在函数里，关键字参数是字典类型, key值必须是字符串


def keyFunc(**kwargs):
    print(kwargs)


# 调用
# keyFunc(1,2,3) #不能这样调用
# 需要先声明一个字典
dictA = {"name": "Weihao", "Age": 21}
# 在将字典传递给函数调用， 这种方式必须要有 **
keyFunc(**dictA)
# 第二种传递方式是
keyFunc(name="Weihao", age=21)
# 函数调用可以为空
keyFunc()  # 空字典
print("分割线".center(50, "-"))
# 关键字参数的参数类型可以混合使用


def complexFunc(*args, **kwargs):  # 元组类型数据和字典类型数据
    print(args)
    print(kwargs)


# 函数调用
complexFunc()  # 可以为空
complexFunc(1, 2, 3, 4, "这里是元组", name="Weihao", age=21)
complexFunc("只有元组没有字典")
complexFunc(replace="只有字典没有元组")
print("分割线".center(50, "-"))


# def TestR(**kwargs, *args):
#     """
#     *可选参数必须要在关键字参数前面，否则会报错
#     """
#     print(kwargs)
#     print(args)


# TestR()
