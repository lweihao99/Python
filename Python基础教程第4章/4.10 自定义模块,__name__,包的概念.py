# 一个模块本质上就是一个py文件
# 自己定义一个模块，其实就是自己写一个py文件
# 而如果一个py文件要当做一个模块被导入，文件名一定要遵守命名规范
# 即由数字，字母，下划线组成，不能以数字开头
# 导入了模块就能使用这个模块的变量和方法函数
import my_module  # 导入自己写的py文件

print(my_module.a)  # 调用变量
my_module.test()  # 调用模块里的方法
my_module.add(1, 2)  # 调用方法

# 如果使用 from <module_name> import *,调用这个模块里所有变量和函数 , 这种方法在调用的时候就不需要写模块名了
# 本质上是读取模块里的 __all__ 属性，看着属性里定义了那些变量和函数
# 如果模块里没有地定义 __all__ 才会导入所有不以 _ 开头的变量和函数
# 比如所以如果写了__all__ 而 __all__ 又没有写 add 那么在调用的时候就会报错，因为不在__all__里
# 如果没有写 __all__ 那么默认可以调用所有变量和函数
# 但是可以欧用 模块名.方法 直接导入， 这个只是限定 import *


# 以一个下划线开始变量，建议只在本模块里使用，别的模块不要导入，比如: _age =19 这样的,要是硬要导入有可能会报错
# from module_name import * 不能导入以一个下划线开始的变量名和方法
# 为了使这种变量不被调用可以使用del 指令删除，比如: del _age, 这样这个变量只能在内部文件使用了
# 所以有下划线的变量名或函数是不想让别人用的

# 注意在导入的时候回先执行一遍模块，所以print也会被运行
# 所以为了避免运行一些没被调用过的语句,所以有了 __name__
# __name__ 的本模块被调用的话会显示 __main__ 而要是被外部调用的话会显示文件名,比如要是demo.py就显示demo
# 即当直接运行这个py文件的时候，只是__main__
# 而当这个py文件作为一个模块被导入的时候，值是文件名


'''
包就是一个文件夹
而各个py文件都在这个包里面，即模块
比如要是一个包叫 chat ，里面有 recv_msg 和 send_msg
那么可以导入:
from chat import recv_msg 或者
from chat.send_msg import x # 导入包里的模块里的变量

可以将多个相似或者有关联的多个模块放到一个文件夹里，便于统一管理
这个文件夹，我们可以称之为包

python包里，会有一个 __init__.py 文件，可以在__init__.py 里导入其他文件,很复杂
在导入包的时候回优先读取__init__ 文件，所以要是在在这个文件里已经导入了其他文件，可以直接调用，而不需要从新导入一次
'''
