# 正则表达式
# 概念: 对字符串的模板,是一种文档的格式要求; 对字符串的一种限制,要求
"""
*正则表达式的常用操作符的基础概念:
1-  . :表示任何单个字符---> .* 表示就是前面的字符可以使任意字符,并且可以是无限长
2-  [] :字符集，给单个字符给出取值范围---> [abc]表示 a,b,c ; [a-z] 表示 a 到 z 单个字符
3-  [^ ] :非字符集，对单个字符给出排除范围---> [^abc]表示非 a 或 b 或 c 的单个字符, 除abc以外都可以
4-  * :前一个字符 0 次或无限次扩展---> abc* 表示 ab, abc, abcc, abccc等
5-  + :前一个字符 1 次或无限次扩展---> abc+ 表示 abc, abcc, abccc 等, c 至少要出现一次
6-  ? :前一个字符 0 次或 1 次扩展---> abc? 表示 ab, abc
7-  |  :左右表达式任意一个---> abc|def 表示 要么 abc 要么 def
8- {m} :扩展前一个字符 m 次---> ab{2}c 表示 abbc
9- {m,n} :扩展前一个字符 m 至 n 次(含n)---> ab{1,2}c 表示 abc, abbc
10- ^ :匹配字符串开头---> ^abc 表示 abc 且在一个字符串的开头
11- $ :匹配字符串结尾---> abc$ 表示 abc 且在一个字符串的结尾
12- () :分组标记，内部只能使用 | 操作符---> (abc) 表示一组 abc; (abc|def) 表示 abc 或 def
13- \d :数字，等价于[0-9]
14- \w :单词字符，等价于[A-Z a-z 0-9 _]

"""

#RE库的主要功能函数
"""

1- re.search(): 在一个字符串中搜索匹配正则表达式的第一个位置，返回 match 对象
2- re.match(): 从第一个字符串开始的位置起匹配正则表达式，返回 match 对象
3- re.findall(): 搜索字符串， 以列表类型返回全部能匹配的子串
4- re.split(): 将一个字符串按照正则表达式匹配结果进行分割， 返回列表类型
5- re.finditer(): 搜索字符串， 返回一个匹配结果的迭代类型， 每个迭代元素是match对象
6- re.sub(): 在一个字符串中替换所有匹配正则表达式的子串， 返回替换后的字符串

"""

# 正则表达式可以包含一些可选标志修饰符来控制匹配的模式, 默认的时候可以不出现
"""
re.i: 使匹配对大小写不敏感
re.L: 做本地化识别(local-aware)匹配
re.M: 多行匹配，影响 ^ 和 $
re.S: 使.匹配包括换行在内的所有字符
re.U: 根据Unicode字符集解析字符. 这个标志影响 \w, \W, \b, \B.
re.X: 该标志通过给予你更灵活的格式以便你讲正则表达式写的更容易理解
"""

import re


#设定模式对象
pat = re.compile("AA") # 模式---> AA 是个正则表达式,用来验证其他的字符串

m = pat.search("CBA") # search 后面的字符串是被校验的内容，进行查找比对
print(m) # None --> 没有找到可以匹配的地方

n = pat.search("ABCAA")
print(n) # <re.Match object; span=(3, 5), match='AA'>, 在下标 3-5 找到了匹配的字符串

b = pat.search("ABCAAABAACAA")
print(b) # <re.Match object; span=(3, 5), match='AA'>, 找到第一个匹配的地方

# 没有模式对象
a = re.search("asd","Aasd") # 括号里第一个字符串是模板，后面的字符串是被校验的
print(a)


#findall
p = re.findall("a","aASDasDAASad") # 前面的字符串是正则表达式，后面的字符串是被校验的
print("findall",p) #  查找所有匹配的内容, 返回列表

print(re.findall("[A-Z]","ASsADasdWEAas")) # 返回所有大写字母, 并放到列表里

# 正则表达式操作符的组合
print(re.findall("[A-Z]+","ASDazsDASasZasdASD")) # ['ASD', 'DAS', 'Z', 'ASD']


# sub, 分隔,替换
# 第一个字符串是被替换的，第二个字符串是替换对象,　在第三个字符串中查找
print(re.sub("a","A","abcdefg")) # 第三个字符串中的所有 a 替换成 A

# 建议在正则表达式中，被比较的字符串前面加上 r, 为了避免转义字符生效
